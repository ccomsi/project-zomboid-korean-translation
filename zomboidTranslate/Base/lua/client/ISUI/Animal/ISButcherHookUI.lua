---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by RJ.
--- DateTime: 9/12/2024 1:33 PM
---

local FONT_HGT_SMALL = getTextManager():getFontHeight(UIFont.NewSmall)
local FONT_HGT_MEDIUM = getTextManager():getFontHeight(UIFont.Medium)

local function predicateNotBroken(item)
    return not item:isBroken()
end

ISButcherHookUI = ISCollapsableWindow:derive("ISButcherHookUI");
ISButcherHookUI.ui = nil;

function ISButcherHookUI:render()
    ISCollapsableWindow.render(self);

    -- reset height because the debug stuff modify it
    self:setHeight(320);
    self.animalPanel:setHeight(self.originalAnimalPanelHeight);

    if not self.animal3D then
        self.noAnimalPanel:setVisible(true);
        self.animalPanel:setVisible(false);
        return;
    end

    self.noAnimalPanel:setVisible(false);
    self.animalPanel:setVisible(true);

    local x,y,w,h = self.avatarX, self.avatarY, self.avatarWidth, self.avatarHeight
    self.animalPanel:drawRectBorder(x - 2, y - 2, w + 4, h + 4, 1, 0.3, 0.3, 0.3);

    -- display the corpse informations
    --if not self.corpse then
    --    return;
    --end

    self:updateLabelAndButtons();

    self:checkDistance();

    --self:setWidth(self.avatarX + self.avatarWidth + self.biggestWidth + 20)
end

-- check if you're not too far or if the hook doesn't exist anymore
function ISButcherHookUI:checkDistance()
    if not self.hook or not self.hook:isExistInTheWorld() or not self.hook:getSquare() or not self.chr:getCurrentSquare() or self.hook:getSquare():DistToProper(self.chr:getCurrentSquare()) > 4 then
        self:removeFromUIManager();
    end
end

function ISButcherHookUI:updateLabelAndButtons()
    self.knife = self.chr:getInventory():getFirstTagEvalRecurse("ButcherAnimal", predicateNotBroken)

    local modData = self.animal3D:getModData();
    self.biggestWidth = 0;
    self.biggestLabelWidth = 0;
    local yoffset = self.avatarY - 8;

    -- leather
    local text = getText("IGUI_No");
    if self.leather then
        text = getText("IGUI_Yes");
    end


    self.leatherLabel:setName(getText("IGUI_ButcherHook_Leather"));
    self.leatherInfoLabel:setName(text);
    self.biggestWidth = self.leatherLabel:getWidth() + self.leatherInfoLabel:getWidth();
    self.biggestLabelWidth = self.leatherLabel:getWidth();

    -- blood
    text = getText("IGUI_No");
    if self.blood and self.blood > 0 then
        text = getText("IGUI_Yes") .. " (" .. round(self.blood,2) .. "L)";
    end

    self.bloodLabel:setName(getText("IGUI_ButcherHook_Blood"));
    self.bloodInfoLabel:setName(text);
    self.biggestWidth = math.max(self.biggestWidth, self.bloodLabel:getWidth() + self.bloodInfoLabel:getWidth())
    self.biggestLabelWidth = math.max(self.biggestLabelWidth, self.bloodLabel:getWidth());

    -- head
    text = getText("IGUI_No");
    if self.head then
        text = getText("IGUI_Yes");
    end

    self.headLabel:setName(getText("IGUI_ButcherHook_Head"));
    self.headInfoLabel:setName(text);
    self.biggestWidth = math.max(self.biggestWidth, self.headLabel:getWidth() + self.headInfoLabel:getWidth())
    self.biggestLabelWidth = math.max(self.biggestLabelWidth, self.headLabel:getWidth());

    -- meat
    text = getText("IGUI_No");
    if self.meat then
        text = getText("IGUI_Yes");
    end

    self.meatLabel:setName(getText("IGUI_ButcherHook_Meat"));
    self.meatInfoLabel:setName(text);
    self.biggestWidth = math.max(self.biggestWidth, self.meatLabel:getWidth() + self.meatInfoLabel:getWidth())
    self.biggestLabelWidth = math.max(self.biggestLabelWidth, self.meatLabel:getWidth());

    -- reorganise all positions
    yoffset = self:updatePositions(self.leather, self.removeLeatherBtn, self.leatherLabel, self.leatherInfoLabel, yoffset);
    yoffset = self:updatePositions(self.blood and self.blood > 0, self.removeBloodBtn, self.bloodLabel, self.bloodInfoLabel, yoffset);
    yoffset = self:updatePositions(self.head, self.removeHeadBtn, self.headLabel, self.headInfoLabel, yoffset);
    yoffset = self:updatePositions(self.meat, self.removeMeatBtn, self.meatLabel, self.meatInfoLabel, yoffset);

    -- disable buttons when doing an action
    if self.doingAction then
        self.removeLeatherBtn:setVisible(false)
        self.removeHeadBtn:setVisible(false)
        self.removeMeatBtn:setVisible(false)
        self.removeBloodBtn:setVisible(false)
        self.removeCorpseBtn:setVisible(false);
    else
        self.removeCorpseBtn:setVisible(true);
    end

    -- if you have bucket you can gather animal blood, otherwise you bleed it
    if self:getBuckets() and not self:getBuckets():isEmpty() then
        self.removeBloodBtn:setTitle(getText("IGUI_ButcherHook_Gather"));
    else
        self.removeBloodBtn:setTitle(getText("IGUI_ButcherHook_Bleed"));
    end

    if self.hook:isRemovingBlood() then
        self.doingAction = true;
        self.actionText = getText("IGUI_ButcherHook_Bleed")
        self:updateProgressBar(self.hook:getRemovingBloodProgress());
        self:updateCorpseDatas();

        -- if we have bucket in inventory we can resume taking blood instead of spilling it on ground
        if self:getBuckets() and not self:getBuckets():isEmpty() then
            self.removeBloodBtn:setVisible(true)
        end
    end

    yoffset = self:renderDebugStuff(yoffset);

    -- update the progress bar
    if self.doingAction then
        self.progressBar:setVisible(true);
        self.progressBar:setX(self.avatarX + self.avatarWidth + 10);
        if not AnimalContextMenu.cheat then
            self.progressBar:setY(self.avatarY + self.avatarHeight - self.progressBar:getHeight() + 2);
        else
            self.progressBar:setY(yoffset);
        end
        self.progressBar:setText(self.actionText);
        self.progressBar:setWidth(self.removeLeatherBtn:getX() + self.removeLeatherBtn:getWidth() - (self.avatarX + self.avatarWidth + 10))
        -- removing blood comes from java if no bucket, need to update the progress bar from it
    else
        self.progressBar:setVisible(false);
        self.actionText = nil;
        self.progress = 0;
    end

end

function ISButcherHookUI:renderDebugStuff(yoffset)
    if not AnimalContextMenu.cheat or not self.animalPanel:isVisible() or not self.animal3D then return yoffset; end

    self.animalPanel:drawText("DEBUG INFOS:", self.avatarX + self.avatarWidth + 10, yoffset, 1,1,1,1, UIFont.NewSmall);
    yoffset = yoffset + FONT_HGT_SMALL;

    for i,v in pairs(self.animal3D:getModData()) do
        local value = v;
        if instanceof(value, "Double") then value = round(value, 2) end
        self.animalPanel:drawText("- " .. i .. ": " .. tostring(value), self.avatarX + self.avatarWidth + 10, yoffset, 1,1,1,1, UIFont.NewSmall);
        yoffset = yoffset + FONT_HGT_SMALL;
    end

    if self.animal3D:getModData()["pregnancyTime"] and self.animal3D:getModData()["pregnancyTime"] > 0.3 then
        self.animalPanel:drawText("- shouldDropBaby: true", self.avatarX + self.avatarWidth + 10, yoffset, 1,1,1,1, UIFont.NewSmall);
    else
        self.animalPanel:drawText("- shouldDropBaby: false", self.avatarX + self.avatarWidth + 10, yoffset, 1,1,1,1, UIFont.NewSmall);
    end
    yoffset = yoffset + FONT_HGT_SMALL;

    if self:getHeight() < yoffset + 60 then
        self.animalPanel:setHeight(yoffset + 33)
        self:setHeight(yoffset + 60)
    end

    return yoffset;
end

function ISButcherHookUI:updatePositions(test, button, label, infoLabel, yoffset)
    local xoffset = self.avatarX + self.avatarWidth;
    local buttonOffset = 70;
    local labelSize = 25;

    label:setX(xoffset + 10);
    label:setY(yoffset);
    infoLabel:setX(xoffset + self.biggestLabelWidth + 20);
    infoLabel:setY(yoffset);

    if test then
        button:setVisible(true);
        button:setX(xoffset + self.biggestWidth + buttonOffset);
        button:setY(label:getY() + 2);
    else
        button:setVisible(false);
        button:setX(xoffset + self.biggestWidth + buttonOffset);
        button:setY(label:getY() + 2);
    end

    if not self.knife then
        button.enable = false;
        button.tooltip = getText("Tooltip_Animal_NoKnifeButcher")
    else
        button.enable = true;
        button.tooltip = nil;
    end

    return infoLabel:getY() + labelSize;
end

-- used to get the differents animal parts to display
function ISButcherHookUI:updateCorpseDatas()
    self.leather = nil;
    self.blood = 0;
    self.head = nil;
    self.meat = nil;

    if not self.animal3D or not ButcheringUtil.getAnimalDef(self.animal3D:getTypeAndBreed()) then
        return;
    end

    local modData = self.animal3D:getModData();

    self.leather = modData["leather"];
    self.blood = tonumber(modData["BloodQty"]);
    self.head = modData["head"];
    self.meat = modData["parts"];
    self.animalSize = modData["animalSize"];

    if self.hook:isRemovingBlood() then
        self.doingAction = true;
        self.actionText = getText("IGUI_ButcherHook_Bleed");
    end

    local partDef = ButcheringUtil.getAnimalDef(self.animal3D:getTypeAndBreed());
    local noSkeleton = false;
    if partDef and partDef.noSkeleton then
        noSkeleton = true;
    end

    -- move the skeleton on the ground if there's nothing else on it
    if not self.leather and not self.head and not self.meat and (not self.blood or self.blood <= 0) then
        if noSkeleton then
            --if not self.animal3D then
            --    return;
            --end
            --if self.corpse:getSquare() then
            --    self.corpse:getSquare():removeCorpse(self.corpse);
            --end
            --local body = IsoDeadBody.new(self.animal3D, false);
            --body:setX(self.animal3D:getX());
            --body:setY(self.animal3D:getY());
            --body:setZ(self.hook:getZ());
            --if self.animal3D then
            --    self.animal3D:remove();
            --end
            --self.corpse = nil;
            --self.hook:setCorpse(nil);
            --self.hook:setAnimal(nil);
            --self:setAnimalAvatar();
        else
            self.animal3D:getModData()["skeleton"] = "true";
            --self.corpse:invalidateCorpse();
            --self:onClickRemoveCorpse();
        end
        self:onClickRemoveCorpse();
    end
end

function ISButcherHookUI:create()
    self.avatarX = 20
    self.avatarY = 20
    self.avatarWidth = 148;
    self.avatarHeight = 230;

    local btnWid = 70
    local btnHgt = FONT_HGT_SMALL + 5

    --self.corpse = self.hook:getCorpse();
    self.animal3D = self.hook:getAnimal()

    self.noAnimalPanel = ISPanel:new(1, 16, self.width-2, self.height-27)
    self.noAnimalPanel.backgroundColor = {r=0, g=0, b=0, a=1};
    self.noAnimalPanel.borderColor = {r=0, g=0, b=0, a=0};
    self:addChild(self.noAnimalPanel);

    self.addCorpseBtn = ISButton:new(30,30, btnWid, btnHgt, getText("ContextMenu_AddCorpse"), self, ISButcherHookUI.onClickAddCorpse);
    self.addCorpseBtn:initialise();
    self.addCorpseBtn:instantiate();
    self.addCorpseBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.addCorpseBtn:setVisible(true);
    self.addCorpseBtn:setX((self.width / 2) - self.addCorpseBtn.width / 2)
    self.addCorpseBtn:setY((self.height / 2) - self.addCorpseBtn.height / 2 - 32)
    self.noAnimalPanel:addChild(self.addCorpseBtn);

    self.animalPanel = ISPanel:new(1, 16, self.width-2, self.height-17)
    self.animalPanel.backgroundColor = {r=0, g=0, b=0, a=1};
    self.animalPanel.borderColor = {r=1, g=1, b=1, a=0.5};
    self:addChild(self.animalPanel);
    self.originalAnimalPanelHeight = self.animalPanel:getHeight();

    self.removeCorpseBtn = ISButton:new(30,30, btnWid, btnHgt, getText("IGUI_ButcherHook_RemoveCorpse"), self, ISButcherHookUI.removeCorpseAction);
    self.removeCorpseBtn:initialise();
    self.removeCorpseBtn:instantiate();
    self.removeCorpseBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.removeCorpseBtn:setVisible(true);
    self.removeCorpseBtn:setX(self.avatarX - 2)
    self.removeCorpseBtn:setY(self.avatarY + self.avatarHeight + 5)
    self.animalPanel:addChild(self.removeCorpseBtn);

    --self.avatarPanel = ISCharacterScreenAvatar:new(self.avatarX, self.avatarY, self.avatarWidth, self.avatarHeight)
    --self.avatarPanel:setVisible(false)
    --self.animalPanel:addChild(self.avatarPanel)

    self.leatherLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.leatherLabel:initialise()
    self.animalPanel:addChild(self.leatherLabel)

    self.leatherInfoLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.leatherInfoLabel:initialise()
    self.animalPanel:addChild(self.leatherInfoLabel)

    self.removeLeatherBtn = ISButton:new(30,30, btnWid, btnHgt, getText("IGUI_ButcherHook_Gather"), self, ISButcherHookUI.onRemoveLeather);
    self.removeLeatherBtn:initialise();
    self.removeLeatherBtn:instantiate();
    self.removeLeatherBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.removeLeatherBtn:setVisible(false);
    self.removeLeatherBtn:setX(5)
    self.removeLeatherBtn:setY(self.animalPanel.height - btnHgt - 10)
    self.animalPanel:addChild(self.removeLeatherBtn);

    self.bloodLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.bloodLabel:initialise()
    self.animalPanel:addChild(self.bloodLabel)

    self.bloodInfoLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.bloodInfoLabel:initialise()
    self.animalPanel:addChild(self.bloodInfoLabel)

    self.removeBloodBtn = ISButton:new(30,30, btnWid, btnHgt, getText("IGUI_ButcherHook_Gather"), self, ISButcherHookUI.onRemoveBlood);
    self.removeBloodBtn:initialise();
    self.removeBloodBtn:instantiate();
    self.removeBloodBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.removeBloodBtn:setVisible(false);
    self.removeBloodBtn:setX(5)
    self.removeBloodBtn:setY(self.animalPanel.height - btnHgt - 10)
    self.animalPanel:addChild(self.removeBloodBtn);

    self.headLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.headLabel:initialise()
    self.animalPanel:addChild(self.headLabel)

    self.headInfoLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.headInfoLabel:initialise()
    self.animalPanel:addChild(self.headInfoLabel)

    self.removeHeadBtn = ISButton:new(30,30, btnWid, btnHgt, getText("IGUI_ButcherHook_Gather"), self, ISButcherHookUI.onRemoveHead);
    self.removeHeadBtn:initialise();
    self.removeHeadBtn:instantiate();
    self.removeHeadBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.removeHeadBtn:setVisible(false);
    self.removeHeadBtn:setX(5)
    self.removeHeadBtn:setY(self.animalPanel.height - btnHgt - 10)
    self.animalPanel:addChild(self.removeHeadBtn);

    self.meatLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.meatLabel:initialise()
    self.animalPanel:addChild(self.meatLabel)

    self.meatInfoLabel = ISLabel:new(self.width / 3, 16, 25, "", 1, 1, 1, 1, UIFont.Medium, false)
    self.meatInfoLabel:initialise()
    self.animalPanel:addChild(self.meatInfoLabel)

    self.removeMeatBtn = ISButton:new(30,30, btnWid, btnHgt, getText("IGUI_ButcherHook_Gather"), self, ISButcherHookUI.onRemoveMeat);
    self.removeMeatBtn:initialise();
    self.removeMeatBtn:instantiate();
    self.removeMeatBtn.borderColor = {r=0.3, g=0.3, b=0.3, a=1};
    self.removeMeatBtn:setVisible(false);
    self.removeMeatBtn:setX(5)
    self.removeMeatBtn:setY(self.animalPanel.height - btnHgt - 10)
    self.animalPanel:addChild(self.removeMeatBtn);

    self.progressBar = ISProgressBar:new (self.avatarX + 20, self.avatarY, 100, 20, "", UIFont.NewSmall);
    self.progressBar:setVisible(false);
    self.animalPanel:addChild(self.progressBar);

    self:updateCorpseDatas();

    if self.animal3D then
        self.noAnimalPanel:setVisible(false);
        self:setAnimalAvatar();
    else
        self.animalPanel:setVisible(false);
    end
end

function ISButcherHookUI:updateProgressBar(progress)
    self.progressBar.progress = progress;
end

function ISButcherHookUI:setAnimalAvatar(newModData, newCorpse)
    if not self.animal3D and not newModData then
        if self.avatarPanel then
            self.avatarPanel:setVisible(false)
            self.avatarPanel:removeFromUIManager();
            self.avatarPanel = nil;
        end
        --self.animal3D = nil;
        return;
    end

    --if newCorpse then
    --
    --end

    self.animal3D = self.hook:getAnimal();
    local modData = newModData or self.animal3D:getModData();

    -- recreating the avatarpanel everytime, not really cool but otherwise i have some animations problems, this was a quick fix eh.
    self.avatarPanel = ISCharacterScreenAvatar:new(self.avatarX, self.avatarY, self.avatarWidth, self.avatarHeight)
    self.animalPanel:addChild(self.avatarPanel)

    if not self.animal3D then
        self.animal3D = IsoAnimal.new(getCell(), self.hook:getSquare():getX(), self.hook:getSquare():getY(), self.hook:getSquare():getZ(), modData["AnimalType"], modData["AnimalBreed"]);
        if newCorpse then
            modData["originalSize"] = newCorpse:getAnimalSize();
        end
        self.animal3D:getData():setSizeForced(AnimalAvatarDefinition[modData["AnimalType"]].animalPositionSize)
        if modData["animalSize"] < self.animal3D:getData():getSize() then
            self.animal3D:getData():setSizeForced(modData["animalSize"]);
        end
        self.hook:setAnimal(self.animal3D);
        self.animal3D:setDir(IsoDirections.NE)
        self.animal3D:setX(self.animal3D:getX() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionX)
        self.animal3D:setY(self.animal3D:getY() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionY)
        self.animal3D:setZ(self.animal3D:getZ() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionZ)
        self.animal3D:setOnHook(true);
        self.animal3D:setModData(modData)
        self.animal3D:getAnimalVisual():setSkinTextureName(newCorpse:getAnimalVisual():getSkinTexture());
    end

    if self.animal3D then
        self.animal3D:setHook(self.hook);
    end

    self.avatarPanel:setZoom(AnimalAvatarDefinition[modData["AnimalType"]].butcherHookZoom);
    self.avatarPanel:setXOffset(AnimalAvatarDefinition[modData["AnimalType"]].butcherHookXoffset);
    self.avatarPanel:setYOffset(AnimalAvatarDefinition[modData["AnimalType"]].butcherHookYoffset);
    self.animal3D:setVariable("onhook", true);
    self.avatarPanel:setState("idle")
    self.avatarPanel:setVariable("onhook", true);
    self.avatarPanel:setDirection(IsoDirections.NE)
    self.avatarPanel:setIsometric(false)
    self.avatarPanel:setAnimSetName(self.animal3D:GetAnimSetName())
    self.avatarPanel:setCharacter(self.animal3D)
    self.avatarPanel:setVisible(true)
end

function ISButcherHookUI:onClickAddCorpse()
    local context = ISContextMenu.get(0, self.addCorpseBtn:getAbsoluteX() + 10, self.addCorpseBtn:getAbsoluteY() + 10)

    local corpseList = self:lookForCorpse()
    for i,v in ipairs(corpseList) do
        local text;
        if instanceof(v, "InventoryItem") then
            text = v:getDisplayName();
        end
        if instanceof(v, "IsoDeadBody") then
            if v:isAnimalSkeleton() then
                text = getText("IGUI_Item_AnimalSkeleton", v:getCustomName());
            else
                text = getText("IGUI_Item_AnimalCorpse", v:getCustomName());
            end
        end
        if text then
            local option = context:addOption(text, self, ISButcherHookUI.addCorpseAction, v);
            if not self:isCorpseValid(v) then
                option.notAvailable = true;
                local tooltip = ISWorldObjectContextMenu.addToolTip();
                tooltip:setName(getText("Tooltip_ButcherUI_CantAddThis"));
                option.toolTip = tooltip;
            end
        end
    end

    if #corpseList == 0 then
        local option = context:addOption(getText("IGUI_ButcherHook_NoAnimalFound"), self, nil);
        option.notAvailable = true;
        local tooltip = ISWorldObjectContextMenu.addToolTip();
        tooltip:setName(getText("Tooltip_ButcherUI_AddAnimalCorpse"));
        option.toolTip = tooltip;
    end
end

-- add a corpse on the hook and remove the corpse from either inventory or ground if isodeadbody
function ISButcherHookUI:onAddedCorpse(corpse)
    if not corpse then return; end
    local wasDeadBody = instanceof(corpse, "IsoDeadBody");
    local newCorpse = self:createCorpse(corpse); -- used to get the skin texture
    self:setAnimalAvatar(corpse:getModData(), newCorpse);
    --self.corpse:getModData()["BloodQty"] = 1;
    self:updateCorpseDatas();
    --self.hook:setCorpse(self.corpse);

    if wasDeadBody and corpse then
        corpse:getSquare():removeCorpse(corpse, false);
        corpse:invalidateCorpse();
    end
    if not wasDeadBody and corpse:getContainer() then
        local inv = corpse:getContainer()
        inv:Remove(corpse);
        inv:setDrawDirty(true);
    end
    return corpse;
end

function ISButcherHookUI:onClickRemoveCorpse()
    if not self.animal3D then return; end
    self.animal3D:getData():setSizeForced(self.animal3D:getModData()["originalSize"])
    local body = IsoDeadBody.new(self.animal3D, false);
    body:setX(self.animal3D:getX());
    body:setY(self.animal3D:getY());
    body:setZ(self.hook:getZ());
    body:invalidateCorpse();
    body:setInvalidateNextRender(true);
    body:setModData(self.animal3D:getModData())

    --self.corpse:setX(self.hook:getX());
    --self.corpse:setY(self.hook:getY());
    --self.corpse:setZ(self.hook:getZ());
    --
    --self.corpse:setSquare(self.hook:getSquare());
    --
    --self.hook:getSquare():addCorpse(self.corpse, false);
    --self.corpse:invalidateCorpse();
    --self.corpse:setInvalidateNextRender(true);

    --if isServer() then
    --    GameServer.sendCorpse(dead);
    --end

    if self.animal3D then
        self.animal3D:remove();
    end
    --self.corpse = nil;
    --self.hook:setCorpse(nil);
    self.hook:setAnimal(nil);
    self.animal3D = nil;
    self:setAnimalAvatar();
    self:updateCorpseDatas();
    return body;
end

-- when we change the body model of an animal on the hook we need to reset the avatar/3D animal model
function ISButcherHookUI:resetCorpse()
    local animal = self.animal3D;
    local corpse = self:onClickRemoveCorpse();
    if corpse then
        corpse:getSquare():removeCorpse(corpse, false);
        corpse:invalidateCorpse();
    end
    self:onAddedCorpse(animal);

end

-- If you have the item in your inventory it's a food item, not an IsoDeadBody
-- using this method will always create an IsoDeadBody, better to work with
function ISButcherHookUI:createCorpse(item)
    if instanceof(item, "IsoDeadBody") or instanceof(item, "IsoAnimal") then
        return item;
    end

    return self.chr:getCurrentSquare():createAnimalCorpseFromItem(item);
end

function ISButcherHookUI:isCorpseValid(corpse)
    local modData = corpse:getModData();
    if not modData then return false; end

    if instanceof(corpse, "Food") and corpse:isFrozen() then return false; end

    if not AnimalAvatarDefinition[modData["AnimalType"]] or not AnimalAvatarDefinition[modData["AnimalType"]].hook then return false; end
    if modData["animalSize"] < 0.4 then return false; end

    -- no skeleton on the hook!
    return not modData["skeleton"];
end

function ISButcherHookUI:lookForCorpse()
    local result = {};
    -- look in inventory
    local corpses = self.chr:getInventory():FindAll("CorpseAnimal");
    if corpses then
        for i=0,corpses:size()-1 do
            local corpse = corpses:get(i)
            --if self:isCorpseValid(corpse) then
                table.insert(result, corpses:get(i));
            --end
        end
    end
    -- look on the ground
    local radius = 2;
    for x=self.chr:getCurrentSquare():getX() - radius, self.chr:getCurrentSquare():getX() + radius do
        for y=self.chr:getCurrentSquare():getY() - radius, self.chr:getCurrentSquare():getY() + radius do
            local sq = getCell():getGridSquare(x, y, self.chr:getCurrentSquare():getZ());
            if sq and sq:getStaticMovingObjects() then
                for i=0,sq:getStaticMovingObjects():size()-1 do
                    local object = sq:getStaticMovingObjects():get(i);
                    if instanceof(object, "IsoDeadBody") and object:isAnimal() then
                        --if self:isCorpseValid(object) then
                            table.insert(result, object);
                        --end
                    end
                end
            end
        end
    end
    return result;
end

function ISButcherHookUI:onRemoveLeather()
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISWorldObjectContextMenu.equip(self.chr, self.chr:getPrimaryHandItem(), self.knife, true)
        ISTimedActionQueue.add(ISRemoveLeatherFromAnimal:new(self.chr, self.animal3D, self.hook, self));
    end
end

function ISButcherHookUI:onRemoveHead()
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISWorldObjectContextMenu.equip(self.chr, self.chr:getPrimaryHandItem(), self.knife, true)
        ISTimedActionQueue.add(ISRemoveHeadFromAnimal:new(self.chr, self.animal3D, self.hook, self));
    end
end

function ISButcherHookUI:onRemoveMeat()
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISWorldObjectContextMenu.equip(self.chr, self.chr:getPrimaryHandItem(), self.knife, true)
        ISTimedActionQueue.add(ISRemoveMeatFromAnimal:new(self.chr, self.animal3D, self.hook, self));
    end
end

function ISButcherHookUI:addCorpseAction(corpse)
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISTimedActionQueue.add(ISPutAnimalOnHook:new(self.chr, corpse, self.hook, self));
    end
end

function ISButcherHookUI:removeCorpseAction()
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISTimedActionQueue.add(ISRemoveAnimalFromHook:new(self.chr, self.animal3D, self.hook, self));
    end
end

function ISButcherHookUI:getBuckets()
    return self.chr:getInventory():getAvailableFluidContainer("AnimalBlood")
end

function ISButcherHookUI.onStopBleedingAnimal(self)
    self.progressBar.progress = 0;
    self.doingAction = false;
    self.actionText = nil;
    self:updateCorpseDatas();
end

function ISButcherHookUI:onCutCorpse()
    self.hook:startRemovingBlood(self);
end

function ISButcherHookUI:onRemoveBlood()
    ---- if you have bucket gives a context list to select one, otherwise just bleed the animal (blood goes on ground)
    local context = ISContextMenu.get(0, self.removeBloodBtn:getAbsoluteX() + 10, self.removeBloodBtn:getAbsoluteY() + 10)
    context:addOption(getText("IGUI_None"), self, ISButcherHookUI.onBleedAnimal);

    local bucketList = self:getBuckets();
    if bucketList then
        for i=0,bucketList:size()-1 do
            local bucket = bucketList:get(i);
            local text = bucket:getDisplayName() .. " " .. bucket:getFluidContainer():getAmount() .. "/" .. bucket:getFluidContainer():getCapacity();
            context:addOption(text, self, ISButcherHookUI.onSelectBucketForBlood, bucket);
        end
    end
end

function ISButcherHookUI:onBleedAnimal()
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISWorldObjectContextMenu.equip(self.chr, self.chr:getPrimaryHandItem(), self.knife, true)
        ISTimedActionQueue.add(ISCutAnimalOnHook:new(self.chr, self.animal3D, self.hook, self));
    end
end

function ISButcherHookUI:onSelectBucketForBlood(bucket)
    if luautils.walkAdj(self.chr, self.hook:getSquare(), false) then
        ISWorldObjectContextMenu.equip(self.chr, self.chr:getPrimaryHandItem(), self.knife, true)
        ISTimedActionQueue.add(ISCutAnimalOnHook:new(self.chr, self.animal3D, self.hook, self, bucket));
        ISTimedActionQueue.add(ISGatherBloodFromAnimal:new(self.chr, self.animal3D, self.hook, self, bucket));
    end
end

function ISButcherHookUI:initialise()
    ISCollapsableWindow.initialise(self);
    self:create();
end

function ISButcherHookUI:close()
    self:setVisible(false);
    self:removeFromUIManager();
end

-- when we load an animal that was on a hook we need to recreate his corpse
-- the corpse is created in java, but then the animal needs to be recreated
function ISButcherHookUI.onReattachAnimal(hook, animal)
    animal:setDir(IsoDirections.NE)
    local modData = animal:getModData();
    --local animal3D = IsoAnimal.new(getCell(), hook:getSquare():getX(), hook:getSquare():getY(), hook:getSquare():getZ(), modData["AnimalType"], modData["AnimalBreed"]);
    animal:getData():setSizeForced(AnimalAvatarDefinition[modData["AnimalType"]].animalPositionSize)
    if modData["animalSize"] < animal:getData():getSize() then
        animal:getData():setSizeForced(animal:getModData()["animalSize"]);
    end
    --hook:setAnimal(animal3D);
    --animal3D:setDir(IsoDirections.NE)
    --print("lua attached animal hook pos: ", hook:getX(), hook:getY())
    --animal:setX(hook:getX() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionX)
    --animal:setY(hook:getY() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionY)
    --animal:setZ(hook:getZ() + AnimalAvatarDefinition[modData["AnimalType"]].animalPositionZ)
    --animal3D:setOnHook(true);
    --animal3D:setHook(hook);
    --animal3D:setVariable("onhook", true);
    --animal3D:setModData(modData)
    --animal3D:resetModel();
    --animal3D:resetModelNextFrame();
end

function ISButcherHookUI:setVisible(vis)
    if not vis then
        ISButcherHookUI.ui = nil;
    end
end

function ISButcherHookUI:new(x, y, width, height, hook, player)
    if ISButcherHookUI.ui then
        return ISButcherHookUI.ui;
    end
    local o = {};
    width = 500;
    height = 320;
    o = ISCollapsableWindow:new(x, y, width, height);
    --    o:noBackground();
    setmetatable(o, self);

    self.__index = self;
    o.hook = hook;
    o.chr = player;
    o.corpse = nil;
    o.animal3D = nil;
    o.playerNum = player:getPlayerNum();
    o.borderColor = {r=0.4, g=0.4, b=0.4, a=1};
    o.backgroundColor = {r=0, g=0, b=0, a=0.8};
    ISButcherHookUI.ui = o;
    return o;
end