---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by RJ.
--- DateTime: 2/26/2025 11:05 AM
---

require "ISUI/ISCollapsableWindow"

ISExtendedPlacementUI = ISCollapsableWindow:derive("ISExtendedPlacementUI")
ISExtendedPlacementUI.windows = {}

function ISExtendedPlacementUI:initialise()
    ISCollapsableWindow.initialise(self);
    local btnwidth = 20;
    local btnheight = 20;
    local txtboxwidth = 50;
    local sliderwidth = 150;

    -- AXIS LABEL

    self.labelaxisx = ISLabel:new(5, 20, 25, getText("IGUI_ExtendedPlacement_XAxis"), 1, 1, 1, 1, self.font, true)
    self.labelaxisx:initialise()
    self:addChild(self.labelaxisx)

    self.labelaxisy = ISLabel:new(self.labelaxisx.x, self.labelaxisx.y + self.labelaxisx:getHeight() + 5, 25, getText("IGUI_ExtendedPlacement_YAxis"), 1, 1, 1, 1, self.font, true)
    self.labelaxisy:initialise()
    self:addChild(self.labelaxisy)

    self.labelaxisz = ISLabel:new(self.labelaxisx.x, self.labelaxisy.y + self.labelaxisy:getHeight() + 5, 25, getText("IGUI_ExtendedPlacement_ZAxis"), 1, 1, 1, 1, self.font, true)
    self.labelaxisz:initialise()
    self:addChild(self.labelaxisz)

    -- AXIS TXT BOX

    self.txtboxaxisx = ISTextEntryBox:new(self.item:getWorldXRotation() .. "", 10, self.labelaxisx.y + 3, txtboxwidth, btnheight);
    self.txtboxaxisx.internal = "x";
    self:setupAxisTextBox(self.txtboxaxisx)

    self.txtboxaxisy = ISTextEntryBox:new(self.item:getWorldYRotation() .. "", 10, self.labelaxisy.y + 3, txtboxwidth, btnheight);
    self.txtboxaxisy.internal = "y";
    self:setupAxisTextBox(self.txtboxaxisy)

    self.txtboxaxisz = ISTextEntryBox:new(self.item:getWorldZRotation() .. "", 10, self.labelaxisz.y + 3, txtboxwidth, btnheight);
    self.txtboxaxisz.internal = "z";
    self:setupAxisTextBox(self.txtboxaxisz)

    -- AXIS SLIDERS

    self.slideraxisxrot = ISSliderPanel:new(self.txtboxaxisx.x + self.txtboxaxisx:getWidth(), self.txtboxaxisx.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxisxrot:setValues(0.0, 360.0, 1, 1.0)
    self.slideraxisxrot:setCurrentValue(1.0, true)
    self.slideraxisxrot.internal = "x";
    self.slideraxisxrot.txtbox = self.txtboxaxisx;
    self:addChild(self.slideraxisxrot);

    self.slideraxisyrot = ISSliderPanel:new(self.txtboxaxisy.x + self.txtboxaxisy:getWidth(), self.txtboxaxisy.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxisyrot:setValues(0.0, 360.0, 1, 1.0)
    self.slideraxisyrot:setCurrentValue(1.0, true)
    self.slideraxisyrot.internal = "y";
    self.slideraxisyrot.txtbox = self.txtboxaxisy;
    self:addChild(self.slideraxisyrot);

    self.slideraxiszrot = ISSliderPanel:new(self.txtboxaxisz.x + self.txtboxaxisz:getWidth(), self.txtboxaxisz.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxiszrot:setValues(0.0, 360.0, 1, 1.0)
    self.slideraxiszrot:setCurrentValue(1.0, true)
    self.slideraxiszrot.internal = "z";
    self.slideraxiszrot.txtbox = self.txtboxaxisz;
    self:addChild(self.slideraxiszrot);

    self.slideraxisxmov = ISSliderPanel:new(self.txtboxaxisx.x + self.txtboxaxisx:getWidth(), self.txtboxaxisx.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxisxmov:setValues(0.0, 1.0, 0.01, 1.0)
    self.slideraxisxmov:setCurrentValue(1.0, true)
    self.slideraxisxmov.internal = "x";
    self.slideraxisxmov.txtbox = self.txtboxaxisx;
    self.slideraxisxmov:setVisible(false);
    self:addChild(self.slideraxisxmov);

    self.slideraxisymov = ISSliderPanel:new(self.txtboxaxisy.x + self.txtboxaxisy:getWidth(), self.txtboxaxisy.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxisymov:setValues(0.0, 1.0, 0.01, 1.0)
    self.slideraxisymov:setCurrentValue(1.0, true)
    self.slideraxisymov.internal = "y";
    self.slideraxisymov.txtbox = self.txtboxaxisy;
    self.slideraxisymov:setVisible(false);
    self:addChild(self.slideraxisymov);

    self.slideraxiszmov = ISSliderPanel:new(self.txtboxaxisz.x + self.txtboxaxisz:getWidth(), self.txtboxaxisz.y +3, sliderwidth, btnheight, self, self.onAxisSliderChange)
    self.slideraxiszmov:setValues(0.0, 1.0, 0.01, 1.0)
    self.slideraxiszmov:setCurrentValue(1.0, true)
    self.slideraxiszmov.internal = "z";
    self.slideraxiszmov.txtbox = self.txtboxaxisz;
    self.slideraxiszmov:setVisible(false);
    self:addChild(self.slideraxiszmov);

    -- MODE ROTATION/MOVEMENT

    self.labelmode = ISLabel:new(self.labelaxisx.x, self.labelaxisz.y + self.labelaxisz:getHeight() + 5, 25, getText("IGUI_ExtendedPlacement_Mode"), 1, 1, 1, 1, self.font, true)
    self.labelmode:initialise()
    self:addChild(self.labelmode)

    self.btnmode = ISButton:new(10, self.labelmode.y + 3, btnwidth, btnheight, getText("IGUI_ExtendedPlacement_ModeRotation"), self, ISExtendedPlacementUI.clickedButton);
    self.btnmode.internal = "MODE";
    self:setupButton(self.btnmode);

    -- CLOSE AND REVERT
    self.closeBtn = ISButton:new(5, 0, 75, btnheight, getText("IGUI_CraftUI_Close"), self, ISExtendedPlacementUI.clickedButton);
    self.closeBtn.internal = "CLOSE";
    self.closeBtn:initialise();
    self.closeBtn:instantiate();
    self.closeBtn.borderColor = {r=1, g=1, b=1, a=0.1};
    self:addChild(self.closeBtn);

    self.revertBtn = ISButton:new(self.closeBtn.x + self.closeBtn:getWidth() + 5, 0, 75, btnheight, getText("IGUI_ExtendedPlacement_Revert"), self, ISExtendedPlacementUI.clickedButton);
    self.revertBtn.internal = "REVERT";
    self.revertBtn:initialise();
    self.revertBtn:instantiate();
    self.revertBtn.borderColor = {r=1, g=1, b=1, a=0.1};
    self:addChild(self.revertBtn);

    self:adjust();
    self:resetSlidersValues();
end

function ISExtendedPlacementUI:setTxtboxValueFromSliders()
    if self.mode == "rotation" then
        if self.slideraxisxrot.txtbox then
            self.slideraxisxrot.txtbox:setText(self.slideraxisxrot:getCurrentValue() .. "");
        end
        if self.slideraxisyrot.txtbox then
            self.slideraxisyrot.txtbox:setText(self.slideraxisyrot:getCurrentValue() .. "");
        end
        if self.slideraxiszrot.txtbox then
            self.slideraxiszrot.txtbox:setText(self.slideraxiszrot:getCurrentValue() .. "");
        end
    else
        if self.slideraxisxmov.txtbox then
            self.slideraxisxmov.txtbox:setText(self.slideraxisxmov:getCurrentValue() .. "");
        end
        if self.slideraxisymov.txtbox then
            self.slideraxisymov.txtbox:setText(self.slideraxisymov:getCurrentValue() .. "");
        end
        if self.slideraxiszmov.txtbox then
            self.slideraxiszmov.txtbox:setText(self.slideraxiszmov:getCurrentValue() .. "");
        end
    end
end

function ISExtendedPlacementUI:resetSlidersValues()
    self.slideraxisxrot:setCurrentValue(self.item:getWorldXRotation(), true)
    self.slideraxisyrot:setCurrentValue(self.item:getWorldYRotation(), true)
    self.slideraxiszrot:setCurrentValue(self.item:getWorldZRotation(), true)
    self.slideraxisxmov:setCurrentValue(self.worlditem:getOffX(), true)
    self.slideraxisymov:setCurrentValue(self.worlditem:getOffY(), true)
    self.slideraxiszmov:setCurrentValue(self.worlditem:getOffZ(), true)

    self:setTxtboxValueFromSliders();
end

function ISExtendedPlacementUI:onAxisSliderChange(value, slider)
    if slider.txtbox then
        slider.txtbox:setText(value .. "")
    end

    if slider.internal == "x" then
        if self.mode == "rotation" then
            self.item:setWorldXRotation(value);
        else
            self.worlditem:setOffX(value);
        end
    end
    if slider.internal == "y" then
        if self.mode == "rotation" then
            self.item:setWorldYRotation(value);
        else
            self.worlditem:setOffY(value);
        end
    end
    if slider.internal == "z" then
        if self.mode == "rotation" then
            self.item:setWorldZRotation(value);
        else
            self.worlditem:setOffZ(value);
        end
    end
end

function ISExtendedPlacementUI:onAxisTextChange(box)
    print("txt change?")
    -- if we're typing, we don't do anything if it ends with a ".", to avoid resetting the value if you're typing 0.2 for ex.
    if luautils.stringEnds(box:getInternalText(), ".") then
        return;
    end
    local newVal = tonumber(box:getInternalText());
    if not newVal then
        newVal = 0;
    end
    if self.mode == "rotation" then
        if newVal > 360 then
            newVal = 360;
        end
        if newVal < 0 then
            newVal = 0;
        end
        newVal = math.floor(newVal);
    else
        if newVal > 1 then
            newVal = 1;
        end
        if newVal < 0 then
            newVal = 0;
        end
    end
    newVal = luautils.round(newVal, 3)

    if box.internal == "x" then
        if self.mode == "rotation" then
            self.item:setWorldXRotation(newVal);
        else
            self.worlditem:setOffX(newVal);
        end
    end
    if box.internal == "y" then
        if self.mode == "rotation" then
            self.item:setWorldYRotation(newVal);
        else
            self.worlditem:setOffY(newVal);
        end
    end
    if box.internal == "z" then
        if self.mode == "rotation" then
            self.item:setWorldZRotation(newVal);
        else
            self.worlditem:setOffZ(newVal);
        end
    end

    self:resetSlidersValues();
end

function ISExtendedPlacementUI:setupAxisTextBox(txtBox)
    txtBox:initialise();
    txtBox:instantiate();
    txtBox:setOnlyNumbers(true);
    txtBox.onTextChangeFunction = ISExtendedPlacementUI.onAxisTextChange;
    txtBox.target = self;
    self:addChild(txtBox);
end

function ISExtendedPlacementUI:setupButton(button)
    button.repeatWhilePressedFunc = ISExtendedPlacementUI.onMouseDownBtn;
    button.repeatWhilePressedTimer = 10;
    button:initialise();
    button:instantiate();
    button.borderColor = {r=1, g=1, b=1, a=0.1};
    self:addChild(button);
end

function ISExtendedPlacementUI:revert()
    self.item:setWorldXRotation(self.originalRotX);
    self.item:setWorldYRotation(self.originalRotY);
    self.item:setWorldZRotation(self.originalRotZ);

    self.worlditem:setOffX(self.originalMovX);
    self.worlditem:setOffY(self.originalMovY);
    self.worlditem:setOffZ(self.originalMovZ);

    self:resetSlidersValues();
end

function ISExtendedPlacementUI:modeChange()
    self.slideraxisxrot:setVisible(self.mode == "rotation")
    self.slideraxisyrot:setVisible(self.mode == "rotation")
    self.slideraxiszrot:setVisible(self.mode == "rotation")
    self.slideraxisxmov:setVisible(self.mode == "movement")
    self.slideraxisymov:setVisible(self.mode == "movement")
    self.slideraxiszmov:setVisible(self.mode == "movement")

    self:resetSlidersValues();
end

function ISExtendedPlacementUI:clickedButton(button)
    if button.internal == "CLOSE" then
        self:close();
    end
    if button.internal == "REVERT" then
        self:revert();
    end

    if button.internal == "MODE" then
        if self.mode == "rotation" then
            self.mode = "movement";
            self.btnmode.title = getText("IGUI_ExtendedPlacement_ModeMovement");
        else
            self.mode = "rotation";
            self.btnmode.title = getText("IGUI_ExtendedPlacement_ModeRotation");
        end
        self:modeChange();
    end
end

-- re-adjust size and placement of label, buttons etc.
function ISExtendedPlacementUI:adjust()

    -- place buttons near labels, check the biggest one so all are aligned
    local biggestWidth = getTextManager():MeasureStringX(self.font, self.labelaxisx.name);
    local biggestWidthAxis = biggestWidth;
    if getTextManager():MeasureStringX(self.font, self.labelaxisy.name) > biggestWidth then
        biggestWidth = getTextManager():MeasureStringX(self.font, self.labelaxisy.name);
        biggestWidthAxis = biggestWidth;
    end
    if getTextManager():MeasureStringX(self.font, self.labelaxisz.name) > biggestWidth then
        biggestWidth = getTextManager():MeasureStringX(self.font, self.labelaxisz.name);
        biggestWidthAxis = biggestWidth;
    end
    if getTextManager():MeasureStringX(self.font, self.labelmode.name) > biggestWidth then
        biggestWidth = getTextManager():MeasureStringX(self.font, self.labelmode.name);
    end

    self.labelaxisx:setY(self:titleBarHeight() + 5);
    self.labelaxisy:setY(self.labelaxisx.y + self.labelaxisx:getHeight() + 5);
    self.labelaxisz:setY(self.labelaxisy.y + self.labelaxisy:getHeight() + 5);
    self.txtboxaxisx:setY(self.labelaxisx.y);
    self.txtboxaxisy:setY(self.labelaxisy.y);
    self.txtboxaxisz:setY(self.labelaxisz.y);

    local offset = 10;
    self.txtboxaxisx:setX(biggestWidthAxis + offset)
    self.txtboxaxisy:setX(biggestWidthAxis + offset)
    self.txtboxaxisz:setX(biggestWidthAxis + offset)
    self.btnmode:setX(biggestWidthAxis + offset);

    -- recheck the biggest width with the txt boxes
    if self.txtboxaxisx.x + self.txtboxaxisx:getWidth() > biggestWidth then
        biggestWidth = self.txtboxaxisx.x + self.txtboxaxisx:getWidth();
    end
    if self.txtboxaxisy.x + self.txtboxaxisy:getWidth() > biggestWidth then
        biggestWidth = self.txtboxaxisy.x + self.txtboxaxisy:getWidth();
    end
    if self.txtboxaxisz.x + self.txtboxaxisz:getWidth() > biggestWidth then
        biggestWidth = self.txtboxaxisz.x + self.txtboxaxisz:getWidth();
    end

    -- axis sliders
    offset = 15;
    self.slideraxisxrot:setX(biggestWidth + offset);
    self.slideraxisxrot:setY(self.txtboxaxisx.y + 5);

    self.slideraxisyrot:setX(biggestWidth + offset);
    self.slideraxisyrot:setY(self.txtboxaxisy.y + 5);

    self.slideraxiszrot:setX(biggestWidth + offset);
    self.slideraxiszrot:setY(self.txtboxaxisz.y + 5);

    self.slideraxisxmov:setX(biggestWidth + offset);
    self.slideraxisxmov:setY(self.txtboxaxisx.y + 5);

    self.slideraxisymov:setX(biggestWidth + offset);
    self.slideraxisymov:setY(self.txtboxaxisy.y + 5);

    self.slideraxiszmov:setX(biggestWidth + offset);
    self.slideraxiszmov:setY(self.txtboxaxisz.y + 5);

    -- adjust the size of mode button
    local biggestModeWidth = getTextManager():MeasureStringX(UIFont.NewSmall, getText("IGUI_ExtendedPlacement_ModeRotation"))
    if getTextManager():MeasureStringX(UIFont.NewSmall, getText("IGUI_ExtendedPlacement_ModeMovement")) > biggestModeWidth then
        biggestModeWidth = getTextManager():MeasureStringX(UIFont.NewSmall, getText("IGUI_ExtendedPlacement_ModeMovement"));
    end

    self.btnmode:setWidth(biggestModeWidth + 20);
    self.labelmode:setY(self.labelaxisz.y + self.labelaxisz:getHeight() + 5);
    self.btnmode:setY(self.labelmode.y + 3);

    -- move the close & revert button
    self.closeBtn:setY(self.btnmode.y + self.btnmode:getHeight() + 30)
    self.revertBtn:setY(self.btnmode.y + self.btnmode:getHeight() + 30)

    self:setHeight(self.closeBtn.y + self.closeBtn:getHeight() + 5);
    self:setWidth(self.slideraxiszrot:getX() + self.slideraxiszrot:getWidth() + 10);

end

function ISExtendedPlacementUI:prerender()
    ISCollapsableWindow.prerender(self);

    --self:drawRect(0, 0, self.width, self.height, self.backgroundColor.a, self.backgroundColor.r, self.backgroundColor.g, self.backgroundColor.b);
    --self:drawRectBorder(0, 0, self.width, self.height, self.borderColor.a, self.borderColor.r, self.borderColor.g, self.borderColor.b);
end

function ISExtendedPlacementUI:createChildren()
    ISCollapsableWindow.createChildren(self)
end

function ISExtendedPlacementUI:update()
    ISCollapsableWindow.update(self)

    if not self.worlditem:isExistInTheWorld() then
        self:close();
    end
    --self:adjust();
end

function ISExtendedPlacementUI:onJoypadDown(button)
    if button == Joypad.BButton then
        self:removeFromUIManager()
        setJoypadFocus(self.playerNum, nil)
    end
end

function ISExtendedPlacementUI:setObject(item)

end

function ISExtendedPlacementUI:onGainJoypadFocus(joypadData)
    self.drawJoypadFocus = true
end

function ISExtendedPlacementUI:close()
    self:removeFromUIManager()
end

function ISExtendedPlacementUI:new(x, y, character, item)
    local width = 620
    local height = 350
    if not x then
        x = getCore():getScreenWidth() / 2 - width / 2;
    end
    if not y then
        y = getCore():getScreenHeight() / 2 - height / 2;
    end
    local o = ISCollapsableWindow:new(x, y, width, height)
    setmetatable(o, self)
    self.__index = self
    o.title = item:getItem():getDisplayName();
    o.character = getSpecificPlayer(character)
    o.playerNum = character;
    o.worlditem = item
    o.item = item:getItem();
    o.font = UIFont.NewMedium;
    o.mode = "rotation";
    o.pressedTime = 0;
    o.pressedMaxTime = 5;
    o.wasPressing = false;
    o.originalRotX = luautils.round(o.item:getWorldXRotation(), 3);
    o.originalRotY = luautils.round(o.item:getWorldYRotation(), 3);
    o.originalRotZ = luautils.round(o.item:getWorldZRotation(), 3);
    o.originalMovX = luautils.round(o.worlditem:getOffX(), 3);
    o.originalMovY = luautils.round(o.worlditem:getOffY(), 3);
    o.originalMovZ = luautils.round(o.worlditem:getOffZ(), 3);
    o:setWantKeyEvents(true)
    o:setResizable(false)
    return o
end

function ISExtendedPlacementUI:isKeyConsumed(key)
    return self.playerNum == 0 and key == Keyboard.KEY_ESCAPE
end

function ISExtendedPlacementUI:onKeyRelease(key)
    if self.playerNum == 0 and key == Keyboard.KEY_ESCAPE then
        self:close()
        self:removeFromUIManager();
        return
    end
end